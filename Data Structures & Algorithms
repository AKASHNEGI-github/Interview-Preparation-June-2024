# INSERTION SORT

Insertion sort is a simple sorting algorithm that works by iteratively inserting each element of an unsorted list into its correct position in a sorted portion of the list.
It is a "stable" sorting algorithm, meaning that elements with equal values maintain their relative order in the sorted output.
It is an “in-place” sorting algorithm, meaning it doesn’t require any additional memory space beyond the original array.

Algorithm:
We have to start with second element of the array as first element in the array is assumed to be sorted.
Compare second element with the first element and check if the second element is smaller then swap them.
Move to the third element and compare it with the second element, then the first element and swap as necessary to put it in the correct position among the first three elements.
Continue this process, comparing each element with the ones before it and swapping as needed to place it in the correct position among the sorted elements.
Repeat until the entire array is sorted.

Time Complexity of Insertion Sort:
Best case: O(n), If the list is already sorted, where n is the number of elements in the list.
Average case: O(n2), If the list is randomly ordered
Worst case: O(n2), If the list is in reverse order

Space Complexity of Insertion Sort:
Auxiliary Space: O(1), Insertion sort requires O(1) additional space, making it a space-efficient sorting algorithm.

void insertionSort(int arr[] , int n)
{
   for(int i=1 ; i<n ; i++)
   {
       int curr = arr[i];
       int j = i-1;
       while(j >= 0 && arr[j] > curr)
       {
           arr[j+1] = arr[j];
           j--;
       }
       arr[j+1] = curr;
   }
}

# SELECTION SORT

Selection sort is a simple and efficient sorting algorithm that works by repeatedly selecting the smallest (or largest) element from the unsorted portion of the list and moving it to the sorted portion of the list. 

void selectionSort(int arr[] , int n)
{
    for(int i=0 ; i<n-1 ; i++)
    {
        int minIndex = i;
        for(int j=i+1 ; j<n ; j++)
        {
            if(arr[j] < arr[minIndex])
            {
                minIndex = j;
            }
        }
        swap(arr[i] , arr[minIndex]);
    }
}

# BUBBLE SORT

void bubbleSort(int arr[] , int n)
{
    for(int i=0 ; i<n-1 ; i++)
    {
        bool swapped = false;
        for(int j=0 ; j<n-i-1 ; j++)
        {
            if(arr[j] > arr[j+1])
            {
                swap(arr[j] , arr[j+1]);
                swapped = true;
            }
        }
        if(swapped == false)
        {
            break;
        }
    }
}

# MERGE SORT

void merge(int arr[] , int start , int mid , int end)
{
    int n1 = mid - start + 1;
    int n2 = end - mid;
    
    int left_arr[n1];
    int right_arr[n2];
    
    for(int i=0 ; i<n1 ; i++)
    {
        left_arr[i] = arr[start + i];
    }
    for(int j=0 ; j<n2 ; j++)
    {
        right_arr[j] = arr[mid + 1 + j];
    }
    
    int i = 0;
    int j = 0;
    int k = start;
    
    while(i < n1 && j < n2)
    {
        if(left_arr[i] < right_arr[j])
        {
            arr[k] = left_arr[i];
            i++;
            k++;
        }
        else
        {
            arr[k] = right_arr[j];
            j++;
            k++;
        }
    }
    
    while(i < n1)
    {
        arr[k] = left_arr[i];
        i++;
        k++;
    }
    
    while(j < n2)
    {
        arr[k] = right_arr[j];
        j++;
        k++;
    }
}

void mergeSort(int arr[] , int start , int end)
{
    if(start < end)
    {
        int mid = (start+end)/2;
        mergeSort(arr , start , mid);
        mergeSort(arr , mid+1 , end);
        merge(arr , start , mid , end);   
    }
}

# QUICK SORT

int partition(int arr[] , int start , int end)
{
    int pivot = arr[start];
    int count = 0;
    for(int i=start+1 ; i<=end ; i++)
    {
        if(arr[i] <= pivot)
        {
            count++;
        }
    }
    int pivot_index = start + count;
    swap(arr[start] , arr[pivot_index]);
    
    int i = start;
    int j = end;
    while(i < pivot_index && j > pivot_index)
    {
        while(arr[i] <= pivot)
        {
            i++;
        }
        while(arr[j] > pivot)
        {
            j--;
        }
        if(i < pivot_index && j > pivot_index)
        {
            swap(arr[i++] , arr[j--]);
        }
    }
    
    return pivot_index;
}

void quickSort(int arr[] , int start , int end)
{
    if(start < end)
    {
        int p = partition(arr , start , end);
        quickSort(arr , start , p-1);
        quickSort(arr , p+1 , end);
    }
}
